/**
 *
 *  Pastes.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Models/Pastes.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::pbin;

const std::string Pastes::Cols::_id = "\"id\"";
const std::string Pastes::Cols::_text = "\"text\"";
const std::string Pastes::Cols::_language = "\"language\"";
const std::string Pastes::Cols::_created = "\"created\"";
const std::string Pastes::Cols::_expires = "\"expires\"";
const std::string Pastes::Cols::_viewcount = "\"viewcount\"";
const std::string Pastes::Cols::_ipaddress = "\"ipaddress\"";
const std::string Pastes::Cols::_deletetoken = "\"deletetoken\"";
const std::string Pastes::primaryKeyName = "id";
const bool Pastes::hasPrimaryKey = true;
const std::string Pastes::tableName = "\"pastes\"";

const std::vector<typename Pastes::MetaData> Pastes::metaData_={
{"id","std::string","text",0,0,1,1},
{"text","std::string","text",0,0,0,1},
{"language","std::string","text",0,0,0,0},
{"created","::trantor::Date","timestamp with time zone",0,0,0,1},
{"expires","::trantor::Date","timestamp with time zone",0,0,0,0},
{"viewcount","int32_t","integer",4,0,0,1},
{"ipaddress","std::string","inet",0,0,0,0},
{"deletetoken","std::string","text",0,0,0,0}
};
const std::string &Pastes::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Pastes::Pastes(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if(!r["text"].isNull())
        {
            text_=std::make_shared<std::string>(r["text"].as<std::string>());
        }
        if(!r["language"].isNull())
        {
            language_=std::make_shared<std::string>(r["language"].as<std::string>());
        }
        if(!r["created"].isNull())
        {
            auto timeStr = r["created"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["expires"].isNull())
        {
            auto timeStr = r["expires"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expires_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["viewcount"].isNull())
        {
            viewcount_=std::make_shared<int32_t>(r["viewcount"].as<int32_t>());
        }
        if(!r["ipaddress"].isNull())
        {
            ipaddress_=std::make_shared<std::string>(r["ipaddress"].as<std::string>());
        }
        if(!r["deletetoken"].isNull())
        {
            deletetoken_=std::make_shared<std::string>(r["deletetoken"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            text_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            language_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expires_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            viewcount_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            ipaddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            deletetoken_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Pastes::Pastes(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            text_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            language_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expires_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            viewcount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            ipaddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            deletetoken_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}

Pastes::Pastes(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("text"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["text"].isNull())
        {
            text_=std::make_shared<std::string>(pJson["text"].asString());
        }
    }
    if(pJson.isMember("language"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["language"].isNull())
        {
            language_=std::make_shared<std::string>(pJson["language"].asString());
        }
    }
    if(pJson.isMember("created"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["created"].isNull())
        {
            auto timeStr = pJson["created"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("expires"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["expires"].isNull())
        {
            auto timeStr = pJson["expires"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expires_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("viewcount"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["viewcount"].isNull())
        {
            viewcount_=std::make_shared<int32_t>((int32_t)pJson["viewcount"].asInt64());
        }
    }
    if(pJson.isMember("ipaddress"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["ipaddress"].isNull())
        {
            ipaddress_=std::make_shared<std::string>(pJson["ipaddress"].asString());
        }
    }
    if(pJson.isMember("deletetoken"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["deletetoken"].isNull())
        {
            deletetoken_=std::make_shared<std::string>(pJson["deletetoken"].asString());
        }
    }
}

void Pastes::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            text_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            language_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expires_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            viewcount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            ipaddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            deletetoken_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}

void Pastes::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("text"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["text"].isNull())
        {
            text_=std::make_shared<std::string>(pJson["text"].asString());
        }
    }
    if(pJson.isMember("language"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["language"].isNull())
        {
            language_=std::make_shared<std::string>(pJson["language"].asString());
        }
    }
    if(pJson.isMember("created"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["created"].isNull())
        {
            auto timeStr = pJson["created"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("expires"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["expires"].isNull())
        {
            auto timeStr = pJson["expires"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expires_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("viewcount"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["viewcount"].isNull())
        {
            viewcount_=std::make_shared<int32_t>((int32_t)pJson["viewcount"].asInt64());
        }
    }
    if(pJson.isMember("ipaddress"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["ipaddress"].isNull())
        {
            ipaddress_=std::make_shared<std::string>(pJson["ipaddress"].asString());
        }
    }
    if(pJson.isMember("deletetoken"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["deletetoken"].isNull())
        {
            deletetoken_=std::make_shared<std::string>(pJson["deletetoken"].asString());
        }
    }
}

const std::string &Pastes::getValueOfId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Pastes::getId() const noexcept
{
    return id_;
}
void Pastes::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void Pastes::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
const typename Pastes::PrimaryKeyType & Pastes::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Pastes::getValueOfText() const noexcept
{
    static const std::string defaultValue = std::string();
    if(text_)
        return *text_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Pastes::getText() const noexcept
{
    return text_;
}
void Pastes::setText(const std::string &pText) noexcept
{
    text_ = std::make_shared<std::string>(pText);
    dirtyFlag_[1] = true;
}
void Pastes::setText(std::string &&pText) noexcept
{
    text_ = std::make_shared<std::string>(std::move(pText));
    dirtyFlag_[1] = true;
}

const std::string &Pastes::getValueOfLanguage() const noexcept
{
    static const std::string defaultValue = std::string();
    if(language_)
        return *language_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Pastes::getLanguage() const noexcept
{
    return language_;
}
void Pastes::setLanguage(const std::string &pLanguage) noexcept
{
    language_ = std::make_shared<std::string>(pLanguage);
    dirtyFlag_[2] = true;
}
void Pastes::setLanguage(std::string &&pLanguage) noexcept
{
    language_ = std::make_shared<std::string>(std::move(pLanguage));
    dirtyFlag_[2] = true;
}
void Pastes::setLanguageToNull() noexcept
{
    language_.reset();
    dirtyFlag_[2] = true;
}

const ::trantor::Date &Pastes::getValueOfCreated() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(created_)
        return *created_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Pastes::getCreated() const noexcept
{
    return created_;
}
void Pastes::setCreated(const ::trantor::Date &pCreated) noexcept
{
    created_ = std::make_shared<::trantor::Date>(pCreated);
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Pastes::getValueOfExpires() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(expires_)
        return *expires_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Pastes::getExpires() const noexcept
{
    return expires_;
}
void Pastes::setExpires(const ::trantor::Date &pExpires) noexcept
{
    expires_ = std::make_shared<::trantor::Date>(pExpires);
    dirtyFlag_[4] = true;
}
void Pastes::setExpiresToNull() noexcept
{
    expires_.reset();
    dirtyFlag_[4] = true;
}

const int32_t &Pastes::getValueOfViewcount() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(viewcount_)
        return *viewcount_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Pastes::getViewcount() const noexcept
{
    return viewcount_;
}
void Pastes::setViewcount(const int32_t &pViewcount) noexcept
{
    viewcount_ = std::make_shared<int32_t>(pViewcount);
    dirtyFlag_[5] = true;
}

const std::string &Pastes::getValueOfIpaddress() const noexcept
{
    static const std::string defaultValue = std::string();
    if(ipaddress_)
        return *ipaddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Pastes::getIpaddress() const noexcept
{
    return ipaddress_;
}
void Pastes::setIpaddress(const std::string &pIpaddress) noexcept
{
    ipaddress_ = std::make_shared<std::string>(pIpaddress);
    dirtyFlag_[6] = true;
}
void Pastes::setIpaddress(std::string &&pIpaddress) noexcept
{
    ipaddress_ = std::make_shared<std::string>(std::move(pIpaddress));
    dirtyFlag_[6] = true;
}
void Pastes::setIpaddressToNull() noexcept
{
    ipaddress_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Pastes::getValueOfDeletetoken() const noexcept
{
    static const std::string defaultValue = std::string();
    if(deletetoken_)
        return *deletetoken_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Pastes::getDeletetoken() const noexcept
{
    return deletetoken_;
}
void Pastes::setDeletetoken(const std::string &pDeletetoken) noexcept
{
    deletetoken_ = std::make_shared<std::string>(pDeletetoken);
    dirtyFlag_[7] = true;
}
void Pastes::setDeletetoken(std::string &&pDeletetoken) noexcept
{
    deletetoken_ = std::make_shared<std::string>(std::move(pDeletetoken));
    dirtyFlag_[7] = true;
}
void Pastes::setDeletetokenToNull() noexcept
{
    deletetoken_.reset();
    dirtyFlag_[7] = true;
}

void Pastes::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Pastes::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "text",
        "language",
        "created",
        "expires",
        "viewcount",
        "ipaddress",
        "deletetoken"
    };
    return inCols;
}

void Pastes::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLanguage())
        {
            binder << getValueOfLanguage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCreated())
        {
            binder << getValueOfCreated();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExpires())
        {
            binder << getValueOfExpires();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getViewcount())
        {
            binder << getValueOfViewcount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getIpaddress())
        {
            binder << getValueOfIpaddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDeletetoken())
        {
            binder << getValueOfDeletetoken();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Pastes::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Pastes::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLanguage())
        {
            binder << getValueOfLanguage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCreated())
        {
            binder << getValueOfCreated();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExpires())
        {
            binder << getValueOfExpires();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getViewcount())
        {
            binder << getValueOfViewcount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getIpaddress())
        {
            binder << getValueOfIpaddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDeletetoken())
        {
            binder << getValueOfDeletetoken();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Pastes::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getLanguage())
    {
        ret["language"]=getValueOfLanguage();
    }
    else
    {
        ret["language"]=Json::Value();
    }
    if(getCreated())
    {
        ret["created"]=getCreated()->toDbStringLocal();
    }
    else
    {
        ret["created"]=Json::Value();
    }
    if(getExpires())
    {
        ret["expires"]=getExpires()->toDbStringLocal();
    }
    else
    {
        ret["expires"]=Json::Value();
    }
    if(getViewcount())
    {
        ret["viewcount"]=getValueOfViewcount();
    }
    else
    {
        ret["viewcount"]=Json::Value();
    }
    if(getIpaddress())
    {
        ret["ipaddress"]=getValueOfIpaddress();
    }
    else
    {
        ret["ipaddress"]=Json::Value();
    }
    if(getDeletetoken())
    {
        ret["deletetoken"]=getValueOfDeletetoken();
    }
    else
    {
        ret["deletetoken"]=Json::Value();
    }
    return ret;
}

Json::Value Pastes::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getText())
            {
                ret[pMasqueradingVector[1]]=getValueOfText();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLanguage())
            {
                ret[pMasqueradingVector[2]]=getValueOfLanguage();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCreated())
            {
                ret[pMasqueradingVector[3]]=getCreated()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getExpires())
            {
                ret[pMasqueradingVector[4]]=getExpires()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getViewcount())
            {
                ret[pMasqueradingVector[5]]=getValueOfViewcount();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getIpaddress())
            {
                ret[pMasqueradingVector[6]]=getValueOfIpaddress();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getDeletetoken())
            {
                ret[pMasqueradingVector[7]]=getValueOfDeletetoken();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getLanguage())
    {
        ret["language"]=getValueOfLanguage();
    }
    else
    {
        ret["language"]=Json::Value();
    }
    if(getCreated())
    {
        ret["created"]=getCreated()->toDbStringLocal();
    }
    else
    {
        ret["created"]=Json::Value();
    }
    if(getExpires())
    {
        ret["expires"]=getExpires()->toDbStringLocal();
    }
    else
    {
        ret["expires"]=Json::Value();
    }
    if(getViewcount())
    {
        ret["viewcount"]=getValueOfViewcount();
    }
    else
    {
        ret["viewcount"]=Json::Value();
    }
    if(getIpaddress())
    {
        ret["ipaddress"]=getValueOfIpaddress();
    }
    else
    {
        ret["ipaddress"]=Json::Value();
    }
    if(getDeletetoken())
    {
        ret["deletetoken"]=getValueOfDeletetoken();
    }
    else
    {
        ret["deletetoken"]=Json::Value();
    }
    return ret;
}

bool Pastes::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("text"))
    {
        if(!validJsonOfField(1, "text", pJson["text"], err, true))
            return false;
    }
    else
    {
        err="The text column cannot be null";
        return false;
    }
    if(pJson.isMember("language"))
    {
        if(!validJsonOfField(2, "language", pJson["language"], err, true))
            return false;
    }
    if(pJson.isMember("created"))
    {
        if(!validJsonOfField(3, "created", pJson["created"], err, true))
            return false;
    }
    if(pJson.isMember("expires"))
    {
        if(!validJsonOfField(4, "expires", pJson["expires"], err, true))
            return false;
    }
    if(pJson.isMember("viewcount"))
    {
        if(!validJsonOfField(5, "viewcount", pJson["viewcount"], err, true))
            return false;
    }
    if(pJson.isMember("ipaddress"))
    {
        if(!validJsonOfField(6, "ipaddress", pJson["ipaddress"], err, true))
            return false;
    }
    if(pJson.isMember("deletetoken"))
    {
        if(!validJsonOfField(7, "deletetoken", pJson["deletetoken"], err, true))
            return false;
    }
    return true;
}
bool Pastes::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Pastes::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("text"))
    {
        if(!validJsonOfField(1, "text", pJson["text"], err, false))
            return false;
    }
    if(pJson.isMember("language"))
    {
        if(!validJsonOfField(2, "language", pJson["language"], err, false))
            return false;
    }
    if(pJson.isMember("created"))
    {
        if(!validJsonOfField(3, "created", pJson["created"], err, false))
            return false;
    }
    if(pJson.isMember("expires"))
    {
        if(!validJsonOfField(4, "expires", pJson["expires"], err, false))
            return false;
    }
    if(pJson.isMember("viewcount"))
    {
        if(!validJsonOfField(5, "viewcount", pJson["viewcount"], err, false))
            return false;
    }
    if(pJson.isMember("ipaddress"))
    {
        if(!validJsonOfField(6, "ipaddress", pJson["ipaddress"], err, false))
            return false;
    }
    if(pJson.isMember("deletetoken"))
    {
        if(!validJsonOfField(7, "deletetoken", pJson["deletetoken"], err, false))
            return false;
    }
    return true;
}
bool Pastes::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Pastes::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
